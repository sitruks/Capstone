geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age, pclass, survived) %>%
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age) %>%
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age) %>%
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age)
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age, pclass)
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid((survived) ~.)
titanic_clean %>%
drop_na(age, pclass) %>%
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
titanic_clean %>%
drop_na(age, pclass) +
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
titanic_clean %>%
drop_na(age) %>%
ggplot(titanic_clean, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
titanic <- titanic_clean %>%
drop_na(age, pclass)
ggplot(titanic, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
ggplot(titanic, aes(x = age, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.)
glimpse(titanic)
titanic$survived <- factor(titanic$survived, labels = c("Did not Survive", "Survived"))
ggplot(titanic, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill")
titanic$pclass <- factor(titanic$pclass, labels = c("First Class", "Standard", "Economy"))
ggplot(titanic, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.)
pclassFill <- scale_fill_brewer("Class Type", palette = "Reds")
ggplot(titanic, aes(x = age, col = factor(pclass))) +
geom_bar() +
facet_grid(survived ~.) +
pclassFill
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill")
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill
survivedCol <- scale_color_brewer("Survived", palette = "Yellows")
survivedCol <- scale_color_brewer("Survived", palette = "Yellow")
survivedCol <- scale_color_brewer("Survived", palette = "#FFFF00")
survivedCol <- scale_color_brewer("Survived", palette = "YlGn")
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill +
survivedCol
rm(survivedCol)
titanic$survived <- factor(titanic$survived, labels = c("No", "Yes"))
titanic$pclass <- factor(titanic$pclass, labels = c("First Class", "Standard", "Economy"))
pclassFill <- scale_fill_brewer("Class Type", palette = "Reds")
val = c("#FFFFFF","FFFF00")
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill +
survivedCol +
scale_y_continuous("Proportion") +
scale_x_discrete("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_discrete("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
titanic$survived <- factor(titanic$survived, labels = c("No", "Yes"))
titanic$pclass <- factor(titanic$pclass, labels = c("First Class", "Standard", "Economy"))
pclassFill <- scale_fill_brewer("Class Type", palette = "Reds")
val = c("#FFFFFF","#FFFF00")
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
facet_grid(survived ~.) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill") +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill", alpha = 0.7) +
facet_grid(survived ~.) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill", alpha = 0.5) +
facet_grid(survived ~.) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
ggplot(titanic, aes(x = age, col = survived, fill = factor(pclass))) +
geom_histogram(aes(y = ..count../sum(..count..)), binwidth = 1, position = "fill", alpha = 0.5) +
pclassFill +
scale_y_continuous("Proportion") +
scale_x_continuous("Age") +
scale_colour_manual("Survived",
values = val)
library(reshape2)
library(ggthemes)
install.packages("ggthemes")
?geom_bar
?ggplot
install.packages("cluster")
install.packages("cAR")
install.packages("cAR")
install.packages("car")
install.packages(c("scales", "fpc", "mclust", "apcluster", "vegan"))
install.packages("scales")
install.packages(c("scales", "fpc", "mclust", "apcluster", "vegan"))
install.packages(c("scales", "fpc", "mclust", "apcluster", "vegan"))
install.packages(c("scales", "fpc", "mclust", "apcluster", "vegan"))
install.packages(c("scales", "fpc", "mclust", "apcluster", "vegan"))
install.packages(c("seriation", "NbClust"))
library(seriation)
install.packages("seriation")
install.packages("seriation")
install.packages("scales")
install.packages("VennDiagram")
View(adult)
library(tidyverse)
library(reshape2)
library(ggthemes)
View(adult)
install.packages("DetR")
View(adult)
View(chis2009)
library(reshape2)
library(dplyr)
library(ggthemes)
library(DetR)
View(chis2009)
mosaicGG
mosaicGG <- function(data, X, FILL) {
# Proportions in raw data
DF <- as.data.frame.matrix(table(data[[X]], data[[FILL]]))
DF$groupSum <- rowSums(DF)
DF$xmax <- cumsum(DF$groupSum)
DF$xmin <- DF$xmax - DF$groupSum
DF$X <- row.names(DF)
DF$groupSum <- NULL
DF_melted <- melt(DF, id = c("X", "xmin", "xmax"), variable.name = "FILL")
DF_melted <- DF_melted %>%
group_by(X) %>%
mutate(ymax = cumsum(value/sum(value)),
ymin = ymax - value/sum(value))
# Chi-sq test
results <- chisq.test(table(data[[FILL]], data[[X]])) # fill and then x
resid <- melt(results$residuals)
names(resid) <- c("FILL", "X", "residual")
# Merge data
DF_all <- merge(DF_melted, resid)
# Positions for labels
DF_all$xposn <- DF_all$xmin + (DF_all$xmax - DF_all$xmin)/2
index <- DF_all$xmax == max(DF_all$xmax)
DF_all$yposn <- DF_all$ymin[index] + (DF_all$ymax[index] - DF_all$ymin[index])/2
# Plot
g <- ggplot(DF_all, aes(ymin = ymin,  ymax = ymax, xmin = xmin,
xmax = xmax, fill = residual)) +
geom_rect(col = "white") +
geom_text(aes(x = xposn, label = X),
y = 1, size = 3, angle = 90, hjust = 1, show.legend = FALSE) +
geom_text(aes(x = max(xmax),  y = yposn, label = FILL),
size = 3, hjust = 1, show.legend = FALSE) +
scale_fill_gradient2("Residuals") +
scale_x_continuous("Individuals", expand = c(0,0)) +
scale_y_continuous("Proportion", expand = c(0,0)) +
theme_tufte() +
theme(legend.position = "bottom")
print(g)
}
mosaicGG()
library(carData)
mosaicGG(Vocab, "education", "vocabulary")
adult
GameCities <- read_csv("Data/Cities.csv", "Data/GameCities.csv")
Packages <- c("readxl", "tidyverse", "tidytext")
lapply(Packages, library, character.only = TRUE)
GameCities <- read_csv("Data/Cities.csv", "Data/GameCities.csv")
GameCities <- read_csv(c("Data/Cities.csv", "Data/GameCities.csv"))
files <- dir(pattern = "*.csv")
files
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim)
myfiles
rm(myfiles)
rm(files)
rm(c(temp, GameCities))
rm(GameCities)
rm(temp)
dir()
?dir()
list.files(path.expand("~/Data"))
list.files(path.expand("~/Capstone_DS/Data"))
list.files(path.expand("~/Capstokkne_DS/Data"))
list.files(path = "~/Capstone_DS/Data")
files <- dir(pattern = "*.csv")
files
data <- files %>%
map(read_csv) %>%
reduce(rbind)
data
data <- files %>%
map(read_csv) %>%
reduce(rbind
data <- files %>%
map(read_csv) %>%
reduce(rbind)
dir(path = "~/Capstone_DS/Data", pattern = "*.csv")
setwd("~/Capstone_DS/Data/")
wd
setwd("~C://Users/v-kursan/Downloads/Capstone_DS/Data/")
getwd()
setwd("~C:/Users/v-kursan/Downloads/Capstone_DS/Data/")
setwd("C:/Users/v-kursan/Downloads/Capstone_DS/Data/")
setwd("C:/Users/v-kursan/Downloads/Capstone_DS/Data/")
files <- dir(pattern = "*.csv")
files
data <- files %>%
map(read_csv) %>%
reduce(rbind)
data
files
setwd("C:/Users/v-kursan/Downloads/Capstone_DS/")
getwd()
rm(files)
files <- list.files(path = ".C:/Users/v-kursan/Downloads/Capstone_DS/Data/", pattern = "*.csv")
files <- list.files(path = "C:/Users/v-kursan/Downloads/Capstone_DS/Data/", pattern = "*.csv")
df <- files %>%
map(function(x) {
read.csv(paste0("./data/", x))
}) %>%
reduce(rbind)
df <- files %>%
map(function(x) {
read.csv(paste0("C:/Users/v-kursan/Downloads/Capstone_DS/Data/", x))
}) %>%
reduce(rbind)
files
Cities <- read_csv("Data/Cities.csv")
Conferences <- read_csv("Data/Conferences.csv")
ConferenceTourneyGames <- read_csv("Data/ConferenceTourneyGames.csv")
GameCities <- read_csv("Data/GameCities.csv")
NCAATourneyCompactResults <- read_csv("Data/NCAATourneyCompactResults.csv")
NCAATourneyDetailedResults <- read_csv("Data/NCAATourneyDetailedResults.csv")
NCAATourneySeeds <- read_csv("Data/NCAATourneySeeds.csv")
NCAATourneySlots <- read_csv("Data/NCAATourneySlots.csv")
#RegularSeasonCompactResults <- read_csv("Data/RegularSeasonCompactResults.csv")
#RegularSeasonDetailedResults <- read_csv("Data/RegularSeasonDetailedResults.csv")
Seasons <- read_csv("Data/Seasons.csv")
SecondaryTourneyCompactResults <- read_csv("Data/SecondaryTourneyCompactResults.csv")
SecondaryTourneyTeams <- read_csv("Data/SecondaryTourneyTeams.csv")
TeamCoaches <- read_csv("Data/TeamCoaches.csv")
TeamConferences <- read_csv("Data/TeamConferences.csv")
Teams <- read_csv("Data/Teams.csv")
TeamSpellings <- read_csv("Data/TeamSpellings.csv")
TourneyVenues <- read_csv("Data/TourneyVenues.csv")
View(Conferences)
View(ConferenceTourneyGames)
View(GameCities)
ggplot(GameCities, aes(CityID)) +
geom_bar()
View(Cities)
View(TourneyVenues)
View(NCAATourneyDetailedResults)
Winning <- lm(WScore ~ LScore, data = NCAATourneyDetailedResults)
Winning
summary(Winning)
getwd()
setwd("C:/Users/v-kursan/Downloads/linear_regression/linear_regression/")
getwd()
states.data <- readRDS("dataSets/states.rds")
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
tail(states.info, 8)
head(states.info, 15)
states.data
states.info
Exam <- readRDS("C:/Users/v-kursan/Downloads/linear_regression/linear_regression/dataSets/Exam.rds")
Exam
rm(Exam)
diamonds
library(tidyverse)
diamonds
dime <- data.frame(attributes(diamonds)[c("a", "b")])
dime
dime <- data.frame(attributes(diamonds)[c("name", "b")])
dime
rm(dime)
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
plot(plot(sts.ex.sat)
plot(sts.ex.sat)
cor(sts.ex.sat)
sat.mod <- lm(csat ~ expense, data = states.data)
summary(sat.mod)
summary(lm(csat ~ expense + percent, data = states.data))
plot(lm(csat ~ expense + percent, data = states.data))
plot(lm(csat ~ expense + percent, data = states.data))
plot(sat.mod)
sat.mod <- lm(csat ~ expense + percent, data = states.data)
summary(sat.mod)
plot(sat.mod)
plot(sts.ex.sat)
states.data <- readRDS("dataSets/states.rds")
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
cor(sts.ex.sat)
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense + percent, data = states.data)
summary(sat.mod)
cor(sat.mod)
class(sat.mod)
names(sat.mod)
confint(sat.mod)
hist(residuals(sat.mod))
methods(class = class(sat.mod))[1:9]
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2))
plot(sat.mod, which = c(1, 2))
plot(sat.mod)
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.voting.mod
sat.mod
sat.mod <- update(sat.mod, data=na.omit(states.data))
sat.mod
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
states.info
states.nrg.metro <- subset(states.data, select = c("energy", "metro"))
summary(states.nrg.metro)
cor(states.nrg.metro)
plot(states.nrg.metro)
setwd("C:/Users/v-kursan/Downloads/linear_regression/linear_regression/")
states.data <- readRDS("dataSets/states.rds")
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
cor(sts.ex.sat)
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, data=states.data)
summary(sat.mod)
summary(lm(csat ~ expense + percent, data = states.data))
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
confint(sat.mod)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
plot(sts.ex.sat)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
# summary of expense and csat columns, all rows
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
# correlation between expense and csat
cor(sts.ex.sat)
# scatter plot of expense vs csat
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data)
# Summarize and print the results
summary(sat.mod) # show regression coefficients table
summary(lm(csat ~ expense + percent, data = states.data))
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
confint(sat.mod)
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
# fit another model, adding house and senate as predictors
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
# compare using the anova() function
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
states.nrg.metro <- subset(states.data, select = c("energy", "metro"))
summary(states.nrg.metro)
cor(states.nrg.metro)
plot(states.nrg.metro)
states.data
nrg.metro <- lm(energy ~ metro, data = states.data)
summary(nrg.metro)
nrg.metro.per <- lm(energy ~ metro + percent, data = states.data)
summary(nrg.metro.per)
nrg.metro.per.den <- lm(energy ~ metro + percent + density, data = states.data)
summary(nrg.metro.per)
summary(nrg.metro.per.den)
nrg.metro.per.den.inc <- lm(energy ~ metro + percent + density + income, data = states.data)
summary(nrg.metro.per.den.inc)
nrg.metro.den.inc <- lm(energy ~ metro + percent + density + income, data = states.data)
summary(nrg.metro.den.inc)
nrg.metro.den.inc <- lm(energy ~ metro + density + income, data = states.data)
summary(nrg.metro.den.inc)
nrg.metro.per.inc <- lm(energy ~ metro + percent + income, data = states.data)
summary(nrg.metro.per.inc)
nrg.metro.per.inc <- lm(energy ~ metro + income, data = states.data)
summary(nrg.metro.per.inc)
nrg.metro.per.inc <- lm(energy ~ metro + percent + income, data = states.data)
summary(nrg.metro.per.inc)
str(states.data)
nrg.all <- lm(energy ~ metro + percent + pop + area + density + miles + waste + toxic + green + expense + income, data = states.data)
summary(nrg.all)
nrg.eco.money <- lm(energy ~ metro + percent + waste + toxic + green + expense + income, data = states.data)
summary(nrg.eco.money)
nrg.waste.eco.money <- lm(energy ~ metro + percent + waste + toxic + green + expense + income, data = states.data)
summary(nrg.waste.eco.money)
nrg.waste.eco <- lm(energy ~ metro + percent + waste + toxic + green, data = states.data)
summary(nrg.waste.eco)
nrg.eco <- lm(energy ~ metro + percent + toxic + green, data = states.data)
summary(nrg.eco)
nrg.eco <- lm(energy ~ metro + toxic + green, data = states.data)
summary(nrg.eco)
#Additional Predictors #5
nrg.eco <- lm(energy ~ metro + percent + toxic + green, data = states.data)
summary(nrg.eco)
#Additional Predictors #6
nrg.eco2 <- lm(energy ~ metro + toxic + green, data = states.data)
summary(nrg.eco2)
#Additional Predictors #7
nrg.eco3 <- lm(energy ~ metro + toxic + green + income, data = states.data)
summary(nrg.eco3)
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
coef(summary(sat.expense.by.percent))
str(states.data$region)
states.data$region <- factor(states.data$region)
sat.region <- lm(csat ~ region,
data=states.data)
coef(summary(sat.region))
anova(sat.region)
contrasts(states.data$region)
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
summary(nrg.eco.by.percent)
nrg.eco.by.percent <- lm(energy ~ metro*percent + toxic + green, data = states.data)
summary(nrg.eco.by.percent)
summary(nrg.eco2)
str(states.data$region)
states.data$region <- factor(states.data$region)
nrg.eco.region <- lm(energy ~ region + metro*percent + toxic + green,
data=states.data)
summary(nrg.eco.region)
sat.region
states.data$region <-C(region, base=4)
nrg.eco.region <- lm(energy ~ region + metro*percent + toxic + green,
data=states.data)
summary(nrg.eco.region)
str(states.data$region)
View(states.data)
